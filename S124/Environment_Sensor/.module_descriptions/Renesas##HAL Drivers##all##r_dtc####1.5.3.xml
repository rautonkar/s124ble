<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.driver.dtc" path="ssp_cfg/driver/r_dtc_cfg.h" version="0">
        <property default="config.driver.dtc.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.dtc.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.driver.dtc.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.dtc.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.dtc.param_checking_enable.disabled" value="(0)"/>
        </property>
        <property default="config.driver.dtc.software_start.disabled" display="Software Start" id="config.driver.dtc.software_start" description="Include code for software start in the build.">
            <option display="Enabled" id="config.driver.dtc.software_start.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.dtc.software_start.disabled" value="(0)"/>
        </property>
	<property default=".ssp_dtc_vector_table" display="Linker section to keep DTC vector table" id="config.driver.dtc.vector_table" description="Section to place the DTC vector table." />
		
        <content>#define DTC_CFG_PARAM_CHECKING_ENABLE ${config.driver.dtc.param_checking_enable}
				 #define DTC_CFG_SOFTWARE_START_ENABLE ${config.driver.dtc.software_start}
				 #define DTC_CFG_VECTOR_TABLE_SECTION_NAME "${config.driver.dtc.vector_table}"
        </content>
    </config>
    <module config="config.driver.dtc" display="Driver|Transfer|${module.driver.transfer.name} Transfer Driver on r_dtc ${module.driver.transfer.activation_source}" id="module.driver.transfer_on_dtc" version="1" url="https://knowledgebase.renesas.com/English_Content/Renesas_Synergy%E2%84%A2_Platform/Renesas_Synergy_Knowledge_Base/r_dtc_Module_Guide_Resources">
        <constraint display="Unique name required for each instance">
            "${interface.driver.transfer.${module.driver.transfer.name}}" === "1"
        </constraint>
        <constraint display="Requires DTC peripheral">
          "${interface.mcu.dtc}" === "1"
        </constraint>
        <requires id="module.driver.transfer_on_dtc.requires.dtc" interface="interface.mcu.dtc" visible="false" display="Requires DTC peripheral" />
        <provides interface="interface.driver.transfer" />
        <provides interface="interface.driver.transfer_on_dtc" /> <!-- Sometimes only DTC can be used for a transfer interface -->
        <provides interface="interface.driver.transfer.${module.driver.transfer.name}" />
        <provides interface="interface.driver.transfer_on_dtc.${module.driver.transfer.name}" />
        <property default="g_transfer${_instance}" display="Name" id="module.driver.transfer.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.transfer.name}")</constraint>
        </property>
        <property default="module.driver.transfer.mode.mode_normal" display="Mode" id="module.driver.transfer.mode" description="Select the transfer mode. Select the transfer mode. Normal: One transfer per activation, transfer ends after Number of Transfers; Repeat: One transfer per activation, Repeat Area address reset after Number of Transfers, transfer repeats until stopped; Block: Number of Blocks per activation, Repeat Area address reset after Number of Transfers, transfer ends after Number of Blocks.">
            <option display="Normal" id="module.driver.transfer.mode.mode_normal" value="TRANSFER_MODE_NORMAL"/>
            <option display="Repeat" id="module.driver.transfer.mode.mode_repeat" value="TRANSFER_MODE_REPEAT"/>
            <option display="Block" id="module.driver.transfer.mode.mode_block" value="TRANSFER_MODE_BLOCK"/>
        </property>        
        <property default="module.driver.transfer.size.size_2_byte" display="Transfer Size" id="module.driver.transfer.size" description="Select the transfer size.">
            <option display="1 Byte" id="module.driver.transfer.size.size_1_byte" value="TRANSFER_SIZE_1_BYTE"/>
            <option display="2 Bytes" id="module.driver.transfer.size.size_2_byte" value="TRANSFER_SIZE_2_BYTE"/>
            <option display="4 Bytes" id="module.driver.transfer.size.size_4_byte" value="TRANSFER_SIZE_4_BYTE"/>
        </property>        
        <property default="module.driver.transfer.dest_addr_mode.addr_mode_fixed" display="Destination Address Mode" id="module.driver.transfer.dest_addr_mode" description="Select the address mode for the destination.">
            <option display="Fixed" id="module.driver.transfer.dest_addr_mode.addr_mode_fixed" value="TRANSFER_ADDR_MODE_FIXED"/>
            <option display="Incremented" id="module.driver.transfer.dest_addr_mode.addr_mode_incremented" value="TRANSFER_ADDR_MODE_INCREMENTED"/>
            <option display="Decremented" id="module.driver.transfer.dest_addr_mode.addr_mode_decremented" value="TRANSFER_ADDR_MODE_DECREMENTED"/>
        </property>
        <property default="module.driver.transfer.src_addr_mode.addr_mode_fixed" display="Source Address Mode" id="module.driver.transfer.src_addr_mode" description="Select the address mode for the source.">
            <option display="Fixed" id="module.driver.transfer.src_addr_mode.addr_mode_fixed" value="TRANSFER_ADDR_MODE_FIXED"/>
            <option display="Incremented" id="module.driver.transfer.src_addr_mode.addr_mode_incremented" value="TRANSFER_ADDR_MODE_INCREMENTED"/>
            <option display="Decremented" id="module.driver.transfer.src_addr_mode.addr_mode_decremented" value="TRANSFER_ADDR_MODE_DECREMENTED"/>
        </property>        
        <property default="module.driver.transfer.repeat_area.repeat_area_source" display="Repeat Area (Unused in Normal Mode)" id="module.driver.transfer.repeat_area" description="Select the repeat area. Either the source or destination address resets to its initial value after completing Number of Transfers in Repeat or Block mode.">
            <option display="Destination" id="module.driver.transfer.repeat_area.repeat_area_destination" value="TRANSFER_REPEAT_AREA_DESTINATION"/>
            <option display="Source" id="module.driver.transfer.repeat_area.repeat_area_source" value="TRANSFER_REPEAT_AREA_SOURCE"/>
        </property>
        <property default="module.driver.transfer.interrupt.interrupt_end" display="Interrupt Frequency" id="module.driver.transfer.interrupt" description="Select the transfer end interrupt priority.">
            <option display="After all transfers have completed" id="module.driver.transfer.interrupt.interrupt_end" value="TRANSFER_IRQ_END"/>
            <option display="After each transfer" id="module.driver.transfer.interrupt.interrupt_each" value="TRANSFER_IRQ_EACH"/>
        </property>
        <property default="NULL" display="Destination Pointer" id="module.driver.transfer.p_dest" description="Specify the destination pointer." />
        <property default="NULL" display="Source Pointer" id="module.driver.transfer.p_src" description="Specify the source pointer." />
        <property default="0" display="Number of Transfers" id="module.driver.transfer.length" description="Specify the number of transfers.">
            <constraint display="Value must be a non-negative integer">testInteger("${module.driver.transfer.length}")  &amp;&amp; ("${module.driver.transfer.length}" &gt;= 0)</constraint>
           </property>
        <property default="0" display="Number of Blocks (Valid only in Block Mode)" id="module.driver.transfer.num_blocks" description="Specify the number of blocks to transfer in Block mode.">
            <constraint display="Value must be a non-negative integer">testInteger("${module.driver.transfer.num_blocks}")  &amp;&amp; ("${module.driver.transfer.num_blocks}" &gt;= 0)</constraint>
        </property>
        <property default="" display="Activation Source (Must enable IRQ)" id="module.driver.transfer.activation_source" description="Select the DTC transfer start event.">
            <select enum="enum.mcu.elc.event_list" />
        </property>
        <property default="module.driver.transfer.auto_enable.true" display="Auto Enable" id="module.driver.transfer.auto_enable" description="Auto enable the transfer in open().">
            <option display="True" id="module.driver.transfer.auto_enable.true" value="true"/>
            <option display="False" id="module.driver.transfer.auto_enable.false" value="false"/>
        </property>
        <property default="NULL" display="Callback (Only valid with Software start)" id="module.driver.transfer.p_callback" description="A user callback that is called at the end of the transfer.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.transfer.p_callback}")</constraint>
        </property>
        <property default="" display="ELC Software Event Interrupt Priority" id="module.driver.transfer.irq_ipl" description="Select the transfer end interrupt priority.">
             <select enum="enum.mcu.nvic.priorities.optional"/>
        </property>
        <header>
            /* Transfer on DTC Instance. */
            extern const transfer_instance_t ${module.driver.transfer.name};
#ifndef ${module.driver.transfer.p_callback}
void ${module.driver.transfer.p_callback}(transfer_callback_args_t * p_args);
#endif
        </header>
        <includes>#include &quot;r_dtc.h&quot;
#include &quot;r_transfer_api.h&quot;</includes>
        <declarations>
#if ${module.driver.transfer.irq_ipl} != BSP_IRQ_DISABLED
#if !defined(SSP_SUPPRESS_ISR_${module.driver.transfer.name}) &amp;&amp; !defined(SSP_SUPPRESS_ISR_DTC${module.driver.transfer.activation_source})
#define DTC_ACTIVATION_SRC_${module.driver.transfer.activation_source}
#if defined(DTC_ACTIVATION_SRC_ELC_EVENT_ELC_SOFTWARE_EVENT_0) &amp;&amp; !defined(DTC_VECTOR_DEFINED_SOFTWARE_EVENT_0)
SSP_VECTOR_DEFINE(elc_software_event_isr, ELC, SOFTWARE_EVENT_0);
#define DTC_VECTOR_DEFINED_SOFTWARE_EVENT_0
#endif
#if defined(DTC_ACTIVATION_SRC_ELC_EVENT_ELC_SOFTWARE_EVENT_1) &amp;&amp; !defined(DTC_VECTOR_DEFINED_SOFTWARE_EVENT_1)
SSP_VECTOR_DEFINE(elc_software_event_isr, ELC, SOFTWARE_EVENT_1);
#define DTC_VECTOR_DEFINED_SOFTWARE_EVENT_1
#endif
#endif
#endif

dtc_instance_ctrl_t ${module.driver.transfer.name}_ctrl;
transfer_info_t ${module.driver.transfer.name}_info =
{
    .dest_addr_mode      = ${module.driver.transfer.dest_addr_mode},
    .repeat_area         = ${module.driver.transfer.repeat_area},
    .irq                 = ${module.driver.transfer.interrupt},
    .chain_mode          = TRANSFER_CHAIN_MODE_DISABLED,
    .src_addr_mode       = ${module.driver.transfer.src_addr_mode},
    .size                = ${module.driver.transfer.size},
    .mode                = ${module.driver.transfer.mode},
    .p_dest              = (void *) ${module.driver.transfer.p_dest},
    .p_src               = (void const *) ${module.driver.transfer.p_src},
    .num_blocks          = ${module.driver.transfer.num_blocks},
    .length              = ${module.driver.transfer.length},
};
const transfer_cfg_t ${module.driver.transfer.name}_cfg =
{
    .p_info              = &amp;${module.driver.transfer.name}_info,
    .activation_source   = ${module.driver.transfer.activation_source},
    .auto_enable         = ${module.driver.transfer.auto_enable},
    .p_callback          = ${module.driver.transfer.p_callback},
    .p_context           = &amp;${module.driver.transfer.name},
    .irq_ipl             = ${module.driver.transfer.irq_ipl}
};
/* Instance structure to use this module. */
const transfer_instance_t ${module.driver.transfer.name} = 
{
    .p_ctrl        = &amp;${module.driver.transfer.name}_ctrl,
    .p_cfg         = &amp;${module.driver.transfer.name}_cfg,
    .p_api         = &amp;g_transfer_on_dtc
};
</declarations>
    </module>
</synergyModuleDescription>
